FROM cr.shanhu.io/bos-forge

# get the apt-cacher proxy set
ARG APTPROXY=

########## Dapper Configuration #####################

ENV DAPPER_ENV VERSION DEV_BUILD RUNTEST DEBUG APTPROXY ENGINE_REGISTRY_MIRROR KERNEL_CHECK APPEND_SYSTEM_IMAGES APPEND_USER_IMAGES
ENV DAPPER_DOCKER_SOCKET true
ENV DAPPER_SOURCE /go/src/github.com/burmilla/os
ENV DAPPER_OUTPUT ./bin ./dist ./build/initrd ./build/kernel
ENV DAPPER_RUN_ARGS --privileged
ENV TRASH_CACHE ${DAPPER_SOURCE}/.trash-cache
ENV SHELL /bin/bash
WORKDIR ${DAPPER_SOURCE}

########## General Configuration #####################
ARG DAPPER_HOST_ARCH=amd64
ARG HOST_ARCH=${DAPPER_HOST_ARCH}
ARG ARCH=${HOST_ARCH}

ARG OS_REPO=burmilla
ARG HOSTNAME_DEFAULT=burmilla
ARG DISTRIB_ID=BurmillaOS

ARG KERNEL_VERSION=4.14.218-burmilla
ARG KERNEL_ARCH=x86

ARG OS_RELEASES_YML=https://raw.githubusercontent.com/burmilla/releases/v1.9.x

ARG OS_SERVICES_REPO=https://raw.githubusercontent.com/${OS_REPO}/os-services
ARG IMAGE_NAME=${OS_REPO}/os

ARG OS_CONSOLE=default
ARG OS_AUTOFORMAT=false
ARG OS_FIRMWARE=true

ARG SYSTEM_DOCKER_VERSION=17.06-ros6
ARG SYSTEM_DOCKER_URL_amd64=https://github.com/burmilla/os-system-docker/releases/download/${SYSTEM_DOCKER_VERSION}/docker-amd64-${SYSTEM_DOCKER_VERSION}.tgz
ARG SYSTEM_DOCKER_URL_arm64=https://github.com/burmilla/os-system-docker/releases/download/${SYSTEM_DOCKER_VERSION}/docker-arm64-${SYSTEM_DOCKER_VERSION}.tgz

ARG USER_DOCKER_VERSION=19.03.15
ARG USER_DOCKER_ENGINE_VERSION=docker-${USER_DOCKER_VERSION}

ARG AZURE_SERVICE=false
ARG PROXMOXVE_SERVICE=false
######################################################

# Set up environment and export all ARGS as ENV
ENV ARCH=${ARCH} \
    HOST_ARCH=${HOST_ARCH} \
    XZ_DEFAULTS="-T0"

ENV DAPPER_HOST_ARCH=${DAPPER_HOST_ARCH} \
    DISTRIB_ID=${DISTRIB_ID} \
    DOWNLOADS=/usr/src/downloads \
    GOPATH=/go \
    GO_VERSION=1.8.5 \
    GOARCH=$ARCH \
    HOSTNAME_DEFAULT=${HOSTNAME_DEFAULT} \
    IMAGE_NAME=${IMAGE_NAME} \
    KERNEL_VERSION=${KERNEL_VERSION} \
    OS_RELEASES_YML=${OS_RELEASES_YML} \
    OS_REPO=${OS_REPO} \
    OS_SERVICES_REPO=${OS_SERVICES_REPO} \
    OS_CONSOLE=${OS_CONSOLE} \
    OS_AUTOFORMAT=${OS_AUTOFORMAT} \
    OS_FIRMWARE=${OS_FIRMWARE} \
    REPO_VERSION=master \
    SYSTEM_DOCKER_URL=SYSTEM_DOCKER_URL_${ARCH} \
    SYSTEM_DOCKER_URL_amd64=${SYSTEM_DOCKER_URL_amd64} \
    SYSTEM_DOCKER_URL_arm64=${SYSTEM_DOCKER_URL_arm64} \
    USER_DOCKER_VERSION=${USER_DOCKER_VERSION} \
    USER_DOCKER_ENGINE_VERSION=${USER_DOCKER_ENGINE_VERSION} \
    AZURE_SERVICE=${AZURE_SERVICE} \
    PROXMOXVE_SERVICE=${PROXMOXVE_SERVICE}
ENV PATH=${GOPATH}/bin:/usr/local/go/bin:$PATH
ENV GO111MODULE=off

RUN mkdir -p ${DOWNLOADS}

RUN rm /bin/sh && ln -s /bin/bash /bin/sh

# Kernel
COPY _/linux-${KERNEL_VERSION}-${KERNEL_ARCH}.tar.gz \
    ${DOWNLOADS}/kernel.tar.gz

# SELinux Policy
COPY _/selinux_policy.29 policy.29

# Install Go
COPY _/go1.15.8.linux-${ARCH}.tar.gz /usr/local/go.tar.gz
RUN tar -C /usr/local -xzf /usr/local/go.tar.gz

# Get and compile trash
RUN go get github.com/homedrvos/trash

# Get and compile golint
RUN go get golang.org/x/lint/golint

# Install Host Docker
COPY _/docker-${ARCH} /usr/bin/docker
RUN chmod +x /usr/bin/docker

# Install dapper
RUN go get github.com/homedrvos/dapper

# os-base
COPY _/os-base_${ARCH}.tar.xz ${DOWNLOADS}/os-base.tar.xz
RUN tar -xvJf ${DOWNLOADS}/os-base.tar.xz -C ${DOWNLOADS}

# os-initrd-base
COPY _/os-initrd-base-${ARCH}.tar.gz ${DOWNLOADS}/os-initrd-base.tar.xz

ENTRYPOINT ["./scripts/entry"]
CMD ["ci"]
